/*!
 * gptx
 * Copyright (c) 2024 Rui Reogo
 * MIT Licensed
 */

import * as Types from './Types';
import Nextway from './Providers/Nextway';
import Aryahcr from './Providers/Aryahcr';
import Voids from './Providers/Voids';

export class GPTx {
    private provider: keyof Types.ProviderModels;
    private model: Types.ProviderModels[typeof this.provider];

    constructor(o: Types.Options) {
        this.provider = o.provider;
        this.model = o.model;
    }

    public async ChatCompletion(messages: Types.Message[]): Promise<string> {
        switch (this.provider) {
            case 'Nextway':
                return await Nextway(
                    messages,
                    this.model as Types.ProviderModels['Nextway']
                );
            case 'Aryahcr':
                return await Aryahcr(
                    messages,
                    this.model as Types.ProviderModels['Aryahcr']
                );
            case 'Voids':
                return await Voids(
                    messages,
                    this.model as Types.ProviderModels['Voids']
                );
            default:
                throw new Error('Provider not supported');
        }
    }
}
