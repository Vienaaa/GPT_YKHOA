/*!
 * gptx
 * Copyright (c) 2024 Rui Reogo
 * MIT Licensed
 */

import * as Types from '../Types';
import * as Utils from '../Utils';
import axios from 'axios';

async function Nextway(
    messages: Types.Message[],
    model: Types.ProviderModels['Nextway']
): Promise<string> {
    const url = 'https://chat.eqing.tech/api/openai/v1/chat/completions';

    const captchaToken = `P1_${[...Array(30)].map(() => 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.charAt(Math.floor(Math.random() * 64))).join('')}.${[...Array(256)].map(() => 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.charAt(Math.floor(Math.random() * 64))).join('')}.${[...Array(43)].map(() => 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.charAt(Math.floor(Math.random() * 64))).join('')}`;

    const response = await axios.post(
        url,
        {
            messages: messages,
            model: model || 'gpt-4o-free',
            temperature: 0.5,
            max_tokens: 4000,
            captchaToken: captchaToken
        },
        {
            headers: Utils.getHeaders('https://origin.eqing.tech/')
        }
    );

    if (
        response.data.choices &&
        response.data.choices.length > 0 &&
        response.data.choices[0].message &&
        response.data.choices[0].message.content
    ) {
        return response.data.choices[0].message.content.trim();
    }

    throw new Error('Invalid Response Structure');
}

export default Nextway;
